// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#ifndef PROTOBUF_raft_2eproto__INCLUDED
#define PROTOBUF_raft_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_raft_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsAppend_infoImpl();
void InitDefaultsAppend_info();
void InitDefaultsreturnAppendImpl();
void InitDefaultsreturnAppend();
void InitDefaultsVoteInfoImpl();
void InitDefaultsVoteInfo();
void InitDefaultsreturnVoteImpl();
void InitDefaultsreturnVote();
inline void InitDefaults() {
  InitDefaultsAppend_info();
  InitDefaultsreturnAppend();
  InitDefaultsVoteInfo();
  InitDefaultsreturnVote();
}
}  // namespace protobuf_raft_2eproto
namespace raft {
class Append_info;
class Append_infoDefaultTypeInternal;
extern Append_infoDefaultTypeInternal _Append_info_default_instance_;
class VoteInfo;
class VoteInfoDefaultTypeInternal;
extern VoteInfoDefaultTypeInternal _VoteInfo_default_instance_;
class returnAppend;
class returnAppendDefaultTypeInternal;
extern returnAppendDefaultTypeInternal _returnAppend_default_instance_;
class returnVote;
class returnVoteDefaultTypeInternal;
extern returnVoteDefaultTypeInternal _returnVote_default_instance_;
}  // namespace raft
namespace raft {

// ===================================================================

class Append_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.Append_info) */ {
 public:
  Append_info();
  virtual ~Append_info();

  Append_info(const Append_info& from);

  inline Append_info& operator=(const Append_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Append_info(Append_info&& from) noexcept
    : Append_info() {
    *this = ::std::move(from);
  }

  inline Append_info& operator=(Append_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Append_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Append_info* internal_default_instance() {
    return reinterpret_cast<const Append_info*>(
               &_Append_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Append_info* other);
  friend void swap(Append_info& a, Append_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Append_info* New() const PROTOBUF_FINAL { return New(NULL); }

  Append_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Append_info& from);
  void MergeFrom(const Append_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Append_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string entry = 5;
  void clear_entry();
  static const int kEntryFieldNumber = 5;
  const ::std::string& entry() const;
  void set_entry(const ::std::string& value);
  #if LANG_CXX11
  void set_entry(::std::string&& value);
  #endif
  void set_entry(const char* value);
  void set_entry(const char* value, size_t size);
  ::std::string* mutable_entry();
  ::std::string* release_entry();
  void set_allocated_entry(::std::string* entry);

  // int64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // int64 prevLogIndex = 3;
  void clear_prevlogindex();
  static const int kPrevLogIndexFieldNumber = 3;
  ::google::protobuf::int64 prevlogindex() const;
  void set_prevlogindex(::google::protobuf::int64 value);

  // int64 prevLogTerm = 4;
  void clear_prevlogterm();
  static const int kPrevLogTermFieldNumber = 4;
  ::google::protobuf::int64 prevlogterm() const;
  void set_prevlogterm(::google::protobuf::int64 value);

  // int64 leaderCommit = 6;
  void clear_leadercommit();
  static const int kLeaderCommitFieldNumber = 6;
  ::google::protobuf::int64 leadercommit() const;
  void set_leadercommit(::google::protobuf::int64 value);

  // int32 leaderID = 2;
  void clear_leaderid();
  static const int kLeaderIDFieldNumber = 2;
  ::google::protobuf::int32 leaderid() const;
  void set_leaderid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:raft.Append_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr entry_;
  ::google::protobuf::int64 term_;
  ::google::protobuf::int64 prevlogindex_;
  ::google::protobuf::int64 prevlogterm_;
  ::google::protobuf::int64 leadercommit_;
  ::google::protobuf::int32 leaderid_;
  mutable int _cached_size_;
  friend struct ::protobuf_raft_2eproto::TableStruct;
  friend void ::protobuf_raft_2eproto::InitDefaultsAppend_infoImpl();
};
// -------------------------------------------------------------------

class returnAppend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.returnAppend) */ {
 public:
  returnAppend();
  virtual ~returnAppend();

  returnAppend(const returnAppend& from);

  inline returnAppend& operator=(const returnAppend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  returnAppend(returnAppend&& from) noexcept
    : returnAppend() {
    *this = ::std::move(from);
  }

  inline returnAppend& operator=(returnAppend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const returnAppend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const returnAppend* internal_default_instance() {
    return reinterpret_cast<const returnAppend*>(
               &_returnAppend_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(returnAppend* other);
  friend void swap(returnAppend& a, returnAppend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline returnAppend* New() const PROTOBUF_FINAL { return New(NULL); }

  returnAppend* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const returnAppend& from);
  void MergeFrom(const returnAppend& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(returnAppend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:raft.returnAppend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 term_;
  bool success_;
  mutable int _cached_size_;
  friend struct ::protobuf_raft_2eproto::TableStruct;
  friend void ::protobuf_raft_2eproto::InitDefaultsreturnAppendImpl();
};
// -------------------------------------------------------------------

class VoteInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.VoteInfo) */ {
 public:
  VoteInfo();
  virtual ~VoteInfo();

  VoteInfo(const VoteInfo& from);

  inline VoteInfo& operator=(const VoteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VoteInfo(VoteInfo&& from) noexcept
    : VoteInfo() {
    *this = ::std::move(from);
  }

  inline VoteInfo& operator=(VoteInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoteInfo* internal_default_instance() {
    return reinterpret_cast<const VoteInfo*>(
               &_VoteInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(VoteInfo* other);
  friend void swap(VoteInfo& a, VoteInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VoteInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  VoteInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoteInfo& from);
  void MergeFrom(const VoteInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoteInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // int64 lastLogIndex = 3;
  void clear_lastlogindex();
  static const int kLastLogIndexFieldNumber = 3;
  ::google::protobuf::int64 lastlogindex() const;
  void set_lastlogindex(::google::protobuf::int64 value);

  // int64 lastLogTerm = 4;
  void clear_lastlogterm();
  static const int kLastLogTermFieldNumber = 4;
  ::google::protobuf::int64 lastlogterm() const;
  void set_lastlogterm(::google::protobuf::int64 value);

  // int32 candidateID = 2;
  void clear_candidateid();
  static const int kCandidateIDFieldNumber = 2;
  ::google::protobuf::int32 candidateid() const;
  void set_candidateid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:raft.VoteInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 term_;
  ::google::protobuf::int64 lastlogindex_;
  ::google::protobuf::int64 lastlogterm_;
  ::google::protobuf::int32 candidateid_;
  mutable int _cached_size_;
  friend struct ::protobuf_raft_2eproto::TableStruct;
  friend void ::protobuf_raft_2eproto::InitDefaultsVoteInfoImpl();
};
// -------------------------------------------------------------------

class returnVote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.returnVote) */ {
 public:
  returnVote();
  virtual ~returnVote();

  returnVote(const returnVote& from);

  inline returnVote& operator=(const returnVote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  returnVote(returnVote&& from) noexcept
    : returnVote() {
    *this = ::std::move(from);
  }

  inline returnVote& operator=(returnVote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const returnVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const returnVote* internal_default_instance() {
    return reinterpret_cast<const returnVote*>(
               &_returnVote_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(returnVote* other);
  friend void swap(returnVote& a, returnVote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline returnVote* New() const PROTOBUF_FINAL { return New(NULL); }

  returnVote* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const returnVote& from);
  void MergeFrom(const returnVote& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(returnVote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // bool voteGranted = 2;
  void clear_votegranted();
  static const int kVoteGrantedFieldNumber = 2;
  bool votegranted() const;
  void set_votegranted(bool value);

  // @@protoc_insertion_point(class_scope:raft.returnVote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 term_;
  bool votegranted_;
  mutable int _cached_size_;
  friend struct ::protobuf_raft_2eproto::TableStruct;
  friend void ::protobuf_raft_2eproto::InitDefaultsreturnVoteImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Append_info

// int64 term = 1;
inline void Append_info::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Append_info::term() const {
  // @@protoc_insertion_point(field_get:raft.Append_info.term)
  return term_;
}
inline void Append_info::set_term(::google::protobuf::int64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.Append_info.term)
}

// int32 leaderID = 2;
inline void Append_info::clear_leaderid() {
  leaderid_ = 0;
}
inline ::google::protobuf::int32 Append_info::leaderid() const {
  // @@protoc_insertion_point(field_get:raft.Append_info.leaderID)
  return leaderid_;
}
inline void Append_info::set_leaderid(::google::protobuf::int32 value) {
  
  leaderid_ = value;
  // @@protoc_insertion_point(field_set:raft.Append_info.leaderID)
}

// int64 prevLogIndex = 3;
inline void Append_info::clear_prevlogindex() {
  prevlogindex_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Append_info::prevlogindex() const {
  // @@protoc_insertion_point(field_get:raft.Append_info.prevLogIndex)
  return prevlogindex_;
}
inline void Append_info::set_prevlogindex(::google::protobuf::int64 value) {
  
  prevlogindex_ = value;
  // @@protoc_insertion_point(field_set:raft.Append_info.prevLogIndex)
}

// int64 prevLogTerm = 4;
inline void Append_info::clear_prevlogterm() {
  prevlogterm_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Append_info::prevlogterm() const {
  // @@protoc_insertion_point(field_get:raft.Append_info.prevLogTerm)
  return prevlogterm_;
}
inline void Append_info::set_prevlogterm(::google::protobuf::int64 value) {
  
  prevlogterm_ = value;
  // @@protoc_insertion_point(field_set:raft.Append_info.prevLogTerm)
}

// string entry = 5;
inline void Append_info::clear_entry() {
  entry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Append_info::entry() const {
  // @@protoc_insertion_point(field_get:raft.Append_info.entry)
  return entry_.GetNoArena();
}
inline void Append_info::set_entry(const ::std::string& value) {
  
  entry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft.Append_info.entry)
}
#if LANG_CXX11
inline void Append_info::set_entry(::std::string&& value) {
  
  entry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft.Append_info.entry)
}
#endif
inline void Append_info::set_entry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  entry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft.Append_info.entry)
}
inline void Append_info::set_entry(const char* value, size_t size) {
  
  entry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft.Append_info.entry)
}
inline ::std::string* Append_info::mutable_entry() {
  
  // @@protoc_insertion_point(field_mutable:raft.Append_info.entry)
  return entry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Append_info::release_entry() {
  // @@protoc_insertion_point(field_release:raft.Append_info.entry)
  
  return entry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Append_info::set_allocated_entry(::std::string* entry) {
  if (entry != NULL) {
    
  } else {
    
  }
  entry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entry);
  // @@protoc_insertion_point(field_set_allocated:raft.Append_info.entry)
}

// int64 leaderCommit = 6;
inline void Append_info::clear_leadercommit() {
  leadercommit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Append_info::leadercommit() const {
  // @@protoc_insertion_point(field_get:raft.Append_info.leaderCommit)
  return leadercommit_;
}
inline void Append_info::set_leadercommit(::google::protobuf::int64 value) {
  
  leadercommit_ = value;
  // @@protoc_insertion_point(field_set:raft.Append_info.leaderCommit)
}

// -------------------------------------------------------------------

// returnAppend

// int64 term = 1;
inline void returnAppend::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 returnAppend::term() const {
  // @@protoc_insertion_point(field_get:raft.returnAppend.term)
  return term_;
}
inline void returnAppend::set_term(::google::protobuf::int64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.returnAppend.term)
}

// bool success = 2;
inline void returnAppend::clear_success() {
  success_ = false;
}
inline bool returnAppend::success() const {
  // @@protoc_insertion_point(field_get:raft.returnAppend.success)
  return success_;
}
inline void returnAppend::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:raft.returnAppend.success)
}

// -------------------------------------------------------------------

// VoteInfo

// int64 term = 1;
inline void VoteInfo::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VoteInfo::term() const {
  // @@protoc_insertion_point(field_get:raft.VoteInfo.term)
  return term_;
}
inline void VoteInfo::set_term(::google::protobuf::int64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.VoteInfo.term)
}

// int32 candidateID = 2;
inline void VoteInfo::clear_candidateid() {
  candidateid_ = 0;
}
inline ::google::protobuf::int32 VoteInfo::candidateid() const {
  // @@protoc_insertion_point(field_get:raft.VoteInfo.candidateID)
  return candidateid_;
}
inline void VoteInfo::set_candidateid(::google::protobuf::int32 value) {
  
  candidateid_ = value;
  // @@protoc_insertion_point(field_set:raft.VoteInfo.candidateID)
}

// int64 lastLogIndex = 3;
inline void VoteInfo::clear_lastlogindex() {
  lastlogindex_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VoteInfo::lastlogindex() const {
  // @@protoc_insertion_point(field_get:raft.VoteInfo.lastLogIndex)
  return lastlogindex_;
}
inline void VoteInfo::set_lastlogindex(::google::protobuf::int64 value) {
  
  lastlogindex_ = value;
  // @@protoc_insertion_point(field_set:raft.VoteInfo.lastLogIndex)
}

// int64 lastLogTerm = 4;
inline void VoteInfo::clear_lastlogterm() {
  lastlogterm_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VoteInfo::lastlogterm() const {
  // @@protoc_insertion_point(field_get:raft.VoteInfo.lastLogTerm)
  return lastlogterm_;
}
inline void VoteInfo::set_lastlogterm(::google::protobuf::int64 value) {
  
  lastlogterm_ = value;
  // @@protoc_insertion_point(field_set:raft.VoteInfo.lastLogTerm)
}

// -------------------------------------------------------------------

// returnVote

// int64 term = 1;
inline void returnVote::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 returnVote::term() const {
  // @@protoc_insertion_point(field_get:raft.returnVote.term)
  return term_;
}
inline void returnVote::set_term(::google::protobuf::int64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.returnVote.term)
}

// bool voteGranted = 2;
inline void returnVote::clear_votegranted() {
  votegranted_ = false;
}
inline bool returnVote::votegranted() const {
  // @@protoc_insertion_point(field_get:raft.returnVote.voteGranted)
  return votegranted_;
}
inline void returnVote::set_votegranted(bool value) {
  
  votegranted_ = value;
  // @@protoc_insertion_point(field_set:raft.returnVote.voteGranted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raft_2eproto__INCLUDED
