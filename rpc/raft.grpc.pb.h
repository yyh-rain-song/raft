// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raft.proto
#ifndef GRPC_raft_2eproto__INCLUDED
#define GRPC_raft_2eproto__INCLUDED

#include "raft.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace raft {

class FollowerInteraction final {
 public:
  static constexpr char const* service_full_name() {
    return "raft.FollowerInteraction";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AppendEntries(::grpc::ClientContext* context, const ::raft::Append_info& request, ::raft::returnAppend* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::returnAppend>> AsyncAppendEntries(::grpc::ClientContext* context, const ::raft::Append_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::returnAppend>>(AsyncAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::returnAppend>> PrepareAsyncAppendEntries(::grpc::ClientContext* context, const ::raft::Append_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::returnAppend>>(PrepareAsyncAppendEntriesRaw(context, request, cq));
    }
    virtual ::grpc::Status VoteRequest(::grpc::ClientContext* context, const ::raft::VoteInfo& request, ::raft::returnVote* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::returnVote>> AsyncVoteRequest(::grpc::ClientContext* context, const ::raft::VoteInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::returnVote>>(AsyncVoteRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::returnVote>> PrepareAsyncVoteRequest(::grpc::ClientContext* context, const ::raft::VoteInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raft::returnVote>>(PrepareAsyncVoteRequestRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raft::returnAppend>* AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raft::Append_info& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raft::returnAppend>* PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raft::Append_info& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raft::returnVote>* AsyncVoteRequestRaw(::grpc::ClientContext* context, const ::raft::VoteInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raft::returnVote>* PrepareAsyncVoteRequestRaw(::grpc::ClientContext* context, const ::raft::VoteInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AppendEntries(::grpc::ClientContext* context, const ::raft::Append_info& request, ::raft::returnAppend* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::returnAppend>> AsyncAppendEntries(::grpc::ClientContext* context, const ::raft::Append_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::returnAppend>>(AsyncAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::returnAppend>> PrepareAsyncAppendEntries(::grpc::ClientContext* context, const ::raft::Append_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::returnAppend>>(PrepareAsyncAppendEntriesRaw(context, request, cq));
    }
    ::grpc::Status VoteRequest(::grpc::ClientContext* context, const ::raft::VoteInfo& request, ::raft::returnVote* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::returnVote>> AsyncVoteRequest(::grpc::ClientContext* context, const ::raft::VoteInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::returnVote>>(AsyncVoteRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::returnVote>> PrepareAsyncVoteRequest(::grpc::ClientContext* context, const ::raft::VoteInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raft::returnVote>>(PrepareAsyncVoteRequestRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::raft::returnAppend>* AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raft::Append_info& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raft::returnAppend>* PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raft::Append_info& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raft::returnVote>* AsyncVoteRequestRaw(::grpc::ClientContext* context, const ::raft::VoteInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raft::returnVote>* PrepareAsyncVoteRequestRaw(::grpc::ClientContext* context, const ::raft::VoteInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AppendEntries_;
    const ::grpc::internal::RpcMethod rpcmethod_VoteRequest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::raft::Append_info* request, ::raft::returnAppend* response);
    virtual ::grpc::Status VoteRequest(::grpc::ServerContext* context, const ::raft::VoteInfo* request, ::raft::returnVote* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AppendEntries() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::raft::Append_info* request, ::raft::returnAppend* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEntries(::grpc::ServerContext* context, ::raft::Append_info* request, ::grpc::ServerAsyncResponseWriter< ::raft::returnAppend>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VoteRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VoteRequest() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_VoteRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteRequest(::grpc::ServerContext* context, const ::raft::VoteInfo* request, ::raft::returnVote* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVoteRequest(::grpc::ServerContext* context, ::raft::VoteInfo* request, ::grpc::ServerAsyncResponseWriter< ::raft::returnVote>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AppendEntries<WithAsyncMethod_VoteRequest<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AppendEntries() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::raft::Append_info* request, ::raft::returnAppend* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VoteRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VoteRequest() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_VoteRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteRequest(::grpc::ServerContext* context, const ::raft::VoteInfo* request, ::raft::returnVote* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AppendEntries() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::raft::Append_info, ::raft::returnAppend>(std::bind(&WithStreamedUnaryMethod_AppendEntries<BaseClass>::StreamedAppendEntries, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::raft::Append_info* request, ::raft::returnAppend* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAppendEntries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raft::Append_info,::raft::returnAppend>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VoteRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VoteRequest() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::raft::VoteInfo, ::raft::returnVote>(std::bind(&WithStreamedUnaryMethod_VoteRequest<BaseClass>::StreamedVoteRequest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VoteRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VoteRequest(::grpc::ServerContext* context, const ::raft::VoteInfo* request, ::raft::returnVote* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVoteRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raft::VoteInfo,::raft::returnVote>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AppendEntries<WithStreamedUnaryMethod_VoteRequest<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AppendEntries<WithStreamedUnaryMethod_VoteRequest<Service > > StreamedService;
};

}  // namespace raft


#endif  // GRPC_raft_2eproto__INCLUDED
