// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#include "raft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace raft {
class Append_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Append_info>
      _instance;
} _Append_info_default_instance_;
class returnAppendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<returnAppend>
      _instance;
} _returnAppend_default_instance_;
class VoteInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VoteInfo>
      _instance;
} _VoteInfo_default_instance_;
class returnVoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<returnVote>
      _instance;
} _returnVote_default_instance_;
}  // namespace raft
namespace protobuf_raft_2eproto {
void InitDefaultsAppend_infoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raft::_Append_info_default_instance_;
    new (ptr) ::raft::Append_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::Append_info::InitAsDefaultInstance();
}

void InitDefaultsAppend_info() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAppend_infoImpl);
}

void InitDefaultsreturnAppendImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raft::_returnAppend_default_instance_;
    new (ptr) ::raft::returnAppend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::returnAppend::InitAsDefaultInstance();
}

void InitDefaultsreturnAppend() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsreturnAppendImpl);
}

void InitDefaultsVoteInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raft::_VoteInfo_default_instance_;
    new (ptr) ::raft::VoteInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::VoteInfo::InitAsDefaultInstance();
}

void InitDefaultsVoteInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVoteInfoImpl);
}

void InitDefaultsreturnVoteImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raft::_returnVote_default_instance_;
    new (ptr) ::raft::returnVote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::returnVote::InitAsDefaultInstance();
}

void InitDefaultsreturnVote() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsreturnVoteImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::Append_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::Append_info, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::Append_info, leaderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::Append_info, prevlogindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::Append_info, prevlogterm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::Append_info, entry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::Append_info, leadercommit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::returnAppend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::returnAppend, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::returnAppend, success_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::VoteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::VoteInfo, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::VoteInfo, candidateid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::VoteInfo, lastlogindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::VoteInfo, lastlogterm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::returnVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::returnVote, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::returnVote, votegranted_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::raft::Append_info)},
  { 11, -1, sizeof(::raft::returnAppend)},
  { 18, -1, sizeof(::raft::VoteInfo)},
  { 27, -1, sizeof(::raft::returnVote)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft::_Append_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft::_returnAppend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft::_VoteInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft::_returnVote_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "raft.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nraft.proto\022\004raft\"}\n\013Append_info\022\014\n\004ter"
      "m\030\001 \001(\003\022\020\n\010leaderID\030\002 \001(\005\022\024\n\014prevLogInde"
      "x\030\003 \001(\003\022\023\n\013prevLogTerm\030\004 \001(\003\022\r\n\005entry\030\005 "
      "\001(\t\022\024\n\014leaderCommit\030\006 \001(\003\"-\n\014returnAppen"
      "d\022\014\n\004term\030\001 \001(\003\022\017\n\007success\030\002 \001(\010\"X\n\010Vote"
      "Info\022\014\n\004term\030\001 \001(\003\022\023\n\013candidateID\030\002 \001(\005\022"
      "\024\n\014lastLogIndex\030\003 \001(\003\022\023\n\013lastLogTerm\030\004 \001"
      "(\003\"/\n\nreturnVote\022\014\n\004term\030\001 \001(\003\022\023\n\013voteGr"
      "anted\030\002 \001(\0102\202\001\n\023FollowerInteraction\0228\n\rA"
      "ppendEntries\022\021.raft.Append_info\032\022.raft.r"
      "eturnAppend\"\000\0221\n\013VoteRequest\022\016.raft.Vote"
      "Info\032\020.raft.returnVote\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 472);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_raft_2eproto
namespace raft {

// ===================================================================

void Append_info::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Append_info::kTermFieldNumber;
const int Append_info::kLeaderIDFieldNumber;
const int Append_info::kPrevLogIndexFieldNumber;
const int Append_info::kPrevLogTermFieldNumber;
const int Append_info::kEntryFieldNumber;
const int Append_info::kLeaderCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Append_info::Append_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_raft_2eproto::InitDefaultsAppend_info();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.Append_info)
}
Append_info::Append_info(const Append_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.entry().size() > 0) {
    entry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entry_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&leaderid_) -
    reinterpret_cast<char*>(&term_)) + sizeof(leaderid_));
  // @@protoc_insertion_point(copy_constructor:raft.Append_info)
}

void Append_info::SharedCtor() {
  entry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leaderid_) -
      reinterpret_cast<char*>(&term_)) + sizeof(leaderid_));
  _cached_size_ = 0;
}

Append_info::~Append_info() {
  // @@protoc_insertion_point(destructor:raft.Append_info)
  SharedDtor();
}

void Append_info::SharedDtor() {
  entry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Append_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Append_info::descriptor() {
  ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Append_info& Append_info::default_instance() {
  ::protobuf_raft_2eproto::InitDefaultsAppend_info();
  return *internal_default_instance();
}

Append_info* Append_info::New(::google::protobuf::Arena* arena) const {
  Append_info* n = new Append_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Append_info::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.Append_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leaderid_) -
      reinterpret_cast<char*>(&term_)) + sizeof(leaderid_));
  _internal_metadata_.Clear();
}

bool Append_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.Append_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 leaderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 prevLogIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prevlogindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 prevLogTerm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prevlogterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string entry = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entry()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->entry().data(), static_cast<int>(this->entry().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft.Append_info.entry"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 leaderCommit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leadercommit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.Append_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.Append_info)
  return false;
#undef DO_
}

void Append_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.Append_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // int32 leaderID = 2;
  if (this->leaderid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderid(), output);
  }

  // int64 prevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->prevlogindex(), output);
  }

  // int64 prevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->prevlogterm(), output);
  }

  // string entry = 5;
  if (this->entry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entry().data(), static_cast<int>(this->entry().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft.Append_info.entry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->entry(), output);
  }

  // int64 leaderCommit = 6;
  if (this->leadercommit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->leadercommit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft.Append_info)
}

::google::protobuf::uint8* Append_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.Append_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // int32 leaderID = 2;
  if (this->leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderid(), target);
  }

  // int64 prevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->prevlogindex(), target);
  }

  // int64 prevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->prevlogterm(), target);
  }

  // string entry = 5;
  if (this->entry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entry().data(), static_cast<int>(this->entry().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft.Append_info.entry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->entry(), target);
  }

  // int64 leaderCommit = 6;
  if (this->leadercommit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->leadercommit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.Append_info)
  return target;
}

size_t Append_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.Append_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string entry = 5;
  if (this->entry().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entry());
  }

  // int64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  // int64 prevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->prevlogindex());
  }

  // int64 prevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->prevlogterm());
  }

  // int64 leaderCommit = 6;
  if (this->leadercommit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->leadercommit());
  }

  // int32 leaderID = 2;
  if (this->leaderid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leaderid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Append_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.Append_info)
  GOOGLE_DCHECK_NE(&from, this);
  const Append_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Append_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.Append_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.Append_info)
    MergeFrom(*source);
  }
}

void Append_info::MergeFrom(const Append_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.Append_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entry().size() > 0) {

    entry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entry_);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.prevlogindex() != 0) {
    set_prevlogindex(from.prevlogindex());
  }
  if (from.prevlogterm() != 0) {
    set_prevlogterm(from.prevlogterm());
  }
  if (from.leadercommit() != 0) {
    set_leadercommit(from.leadercommit());
  }
  if (from.leaderid() != 0) {
    set_leaderid(from.leaderid());
  }
}

void Append_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.Append_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Append_info::CopyFrom(const Append_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.Append_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Append_info::IsInitialized() const {
  return true;
}

void Append_info::Swap(Append_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Append_info::InternalSwap(Append_info* other) {
  using std::swap;
  entry_.Swap(&other->entry_);
  swap(term_, other->term_);
  swap(prevlogindex_, other->prevlogindex_);
  swap(prevlogterm_, other->prevlogterm_);
  swap(leadercommit_, other->leadercommit_);
  swap(leaderid_, other->leaderid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Append_info::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void returnAppend::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int returnAppend::kTermFieldNumber;
const int returnAppend::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

returnAppend::returnAppend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_raft_2eproto::InitDefaultsreturnAppend();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.returnAppend)
}
returnAppend::returnAppend(const returnAppend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&term_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:raft.returnAppend)
}

void returnAppend::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&term_)) + sizeof(success_));
  _cached_size_ = 0;
}

returnAppend::~returnAppend() {
  // @@protoc_insertion_point(destructor:raft.returnAppend)
  SharedDtor();
}

void returnAppend::SharedDtor() {
}

void returnAppend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* returnAppend::descriptor() {
  ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const returnAppend& returnAppend::default_instance() {
  ::protobuf_raft_2eproto::InitDefaultsreturnAppend();
  return *internal_default_instance();
}

returnAppend* returnAppend::New(::google::protobuf::Arena* arena) const {
  returnAppend* n = new returnAppend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void returnAppend::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.returnAppend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&term_)) + sizeof(success_));
  _internal_metadata_.Clear();
}

bool returnAppend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.returnAppend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.returnAppend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.returnAppend)
  return false;
#undef DO_
}

void returnAppend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.returnAppend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft.returnAppend)
}

::google::protobuf::uint8* returnAppend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.returnAppend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.returnAppend)
  return target;
}

size_t returnAppend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.returnAppend)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void returnAppend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.returnAppend)
  GOOGLE_DCHECK_NE(&from, this);
  const returnAppend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const returnAppend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.returnAppend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.returnAppend)
    MergeFrom(*source);
  }
}

void returnAppend::MergeFrom(const returnAppend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.returnAppend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void returnAppend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.returnAppend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void returnAppend::CopyFrom(const returnAppend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.returnAppend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool returnAppend::IsInitialized() const {
  return true;
}

void returnAppend::Swap(returnAppend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void returnAppend::InternalSwap(returnAppend* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata returnAppend::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VoteInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoteInfo::kTermFieldNumber;
const int VoteInfo::kCandidateIDFieldNumber;
const int VoteInfo::kLastLogIndexFieldNumber;
const int VoteInfo::kLastLogTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoteInfo::VoteInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_raft_2eproto::InitDefaultsVoteInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.VoteInfo)
}
VoteInfo::VoteInfo(const VoteInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&candidateid_) -
    reinterpret_cast<char*>(&term_)) + sizeof(candidateid_));
  // @@protoc_insertion_point(copy_constructor:raft.VoteInfo)
}

void VoteInfo::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&candidateid_) -
      reinterpret_cast<char*>(&term_)) + sizeof(candidateid_));
  _cached_size_ = 0;
}

VoteInfo::~VoteInfo() {
  // @@protoc_insertion_point(destructor:raft.VoteInfo)
  SharedDtor();
}

void VoteInfo::SharedDtor() {
}

void VoteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteInfo::descriptor() {
  ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoteInfo& VoteInfo::default_instance() {
  ::protobuf_raft_2eproto::InitDefaultsVoteInfo();
  return *internal_default_instance();
}

VoteInfo* VoteInfo::New(::google::protobuf::Arena* arena) const {
  VoteInfo* n = new VoteInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.VoteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&candidateid_) -
      reinterpret_cast<char*>(&term_)) + sizeof(candidateid_));
  _internal_metadata_.Clear();
}

bool VoteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.VoteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 candidateID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &candidateid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lastLogIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastlogindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lastLogTerm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastlogterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.VoteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.VoteInfo)
  return false;
#undef DO_
}

void VoteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.VoteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // int32 candidateID = 2;
  if (this->candidateid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->candidateid(), output);
  }

  // int64 lastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lastlogindex(), output);
  }

  // int64 lastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->lastlogterm(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft.VoteInfo)
}

::google::protobuf::uint8* VoteInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.VoteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // int32 candidateID = 2;
  if (this->candidateid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->candidateid(), target);
  }

  // int64 lastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lastlogindex(), target);
  }

  // int64 lastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->lastlogterm(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.VoteInfo)
  return target;
}

size_t VoteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.VoteInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  // int64 lastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lastlogindex());
  }

  // int64 lastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lastlogterm());
  }

  // int32 candidateID = 2;
  if (this->candidateid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->candidateid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.VoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoteInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.VoteInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.VoteInfo)
    MergeFrom(*source);
  }
}

void VoteInfo::MergeFrom(const VoteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.VoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.lastlogindex() != 0) {
    set_lastlogindex(from.lastlogindex());
  }
  if (from.lastlogterm() != 0) {
    set_lastlogterm(from.lastlogterm());
  }
  if (from.candidateid() != 0) {
    set_candidateid(from.candidateid());
  }
}

void VoteInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.VoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteInfo::CopyFrom(const VoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.VoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteInfo::IsInitialized() const {
  return true;
}

void VoteInfo::Swap(VoteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoteInfo::InternalSwap(VoteInfo* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(lastlogindex_, other->lastlogindex_);
  swap(lastlogterm_, other->lastlogterm_);
  swap(candidateid_, other->candidateid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoteInfo::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void returnVote::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int returnVote::kTermFieldNumber;
const int returnVote::kVoteGrantedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

returnVote::returnVote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_raft_2eproto::InitDefaultsreturnVote();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.returnVote)
}
returnVote::returnVote(const returnVote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&votegranted_) -
    reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
  // @@protoc_insertion_point(copy_constructor:raft.returnVote)
}

void returnVote::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votegranted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
  _cached_size_ = 0;
}

returnVote::~returnVote() {
  // @@protoc_insertion_point(destructor:raft.returnVote)
  SharedDtor();
}

void returnVote::SharedDtor() {
}

void returnVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* returnVote::descriptor() {
  ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const returnVote& returnVote::default_instance() {
  ::protobuf_raft_2eproto::InitDefaultsreturnVote();
  return *internal_default_instance();
}

returnVote* returnVote::New(::google::protobuf::Arena* arena) const {
  returnVote* n = new returnVote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void returnVote::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.returnVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votegranted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
  _internal_metadata_.Clear();
}

bool returnVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.returnVote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool voteGranted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &votegranted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.returnVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.returnVote)
  return false;
#undef DO_
}

void returnVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.returnVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // bool voteGranted = 2;
  if (this->votegranted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->votegranted(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft.returnVote)
}

::google::protobuf::uint8* returnVote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.returnVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // bool voteGranted = 2;
  if (this->votegranted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->votegranted(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.returnVote)
  return target;
}

size_t returnVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.returnVote)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  // bool voteGranted = 2;
  if (this->votegranted() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void returnVote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.returnVote)
  GOOGLE_DCHECK_NE(&from, this);
  const returnVote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const returnVote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.returnVote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.returnVote)
    MergeFrom(*source);
  }
}

void returnVote::MergeFrom(const returnVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.returnVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.votegranted() != 0) {
    set_votegranted(from.votegranted());
  }
}

void returnVote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.returnVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void returnVote::CopyFrom(const returnVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.returnVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool returnVote::IsInitialized() const {
  return true;
}

void returnVote::Swap(returnVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void returnVote::InternalSwap(returnVote* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(votegranted_, other->votegranted_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata returnVote::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace raft

// @@protoc_insertion_point(global_scope)
