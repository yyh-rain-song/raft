// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raft.proto

#include "raft.pb.h"
#include "raft.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace raft {

static const char* FollowerInteraction_method_names[] = {
  "/raft.FollowerInteraction/AppendEntries",
  "/raft.FollowerInteraction/VoteRequest",
};

std::unique_ptr< FollowerInteraction::Stub> FollowerInteraction::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FollowerInteraction::Stub> stub(new FollowerInteraction::Stub(channel));
  return stub;
}

FollowerInteraction::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AppendEntries_(FollowerInteraction_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VoteRequest_(FollowerInteraction_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FollowerInteraction::Stub::AppendEntries(::grpc::ClientContext* context, const ::raft::Append_info& request, ::raft::returnAppend* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AppendEntries_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::raft::returnAppend>* FollowerInteraction::Stub::AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raft::Append_info& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::raft::returnAppend>::Create(channel_.get(), cq, rpcmethod_AppendEntries_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::raft::returnAppend>* FollowerInteraction::Stub::PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raft::Append_info& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::raft::returnAppend>::Create(channel_.get(), cq, rpcmethod_AppendEntries_, context, request, false);
}

::grpc::Status FollowerInteraction::Stub::VoteRequest(::grpc::ClientContext* context, const ::raft::VoteInfo& request, ::raft::returnVote* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VoteRequest_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::raft::returnVote>* FollowerInteraction::Stub::AsyncVoteRequestRaw(::grpc::ClientContext* context, const ::raft::VoteInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::raft::returnVote>::Create(channel_.get(), cq, rpcmethod_VoteRequest_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::raft::returnVote>* FollowerInteraction::Stub::PrepareAsyncVoteRequestRaw(::grpc::ClientContext* context, const ::raft::VoteInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::raft::returnVote>::Create(channel_.get(), cq, rpcmethod_VoteRequest_, context, request, false);
}

FollowerInteraction::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowerInteraction_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowerInteraction::Service, ::raft::Append_info, ::raft::returnAppend>(
          std::mem_fn(&FollowerInteraction::Service::AppendEntries), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowerInteraction_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowerInteraction::Service, ::raft::VoteInfo, ::raft::returnVote>(
          std::mem_fn(&FollowerInteraction::Service::VoteRequest), this)));
}

FollowerInteraction::Service::~Service() {
}

::grpc::Status FollowerInteraction::Service::AppendEntries(::grpc::ServerContext* context, const ::raft::Append_info* request, ::raft::returnAppend* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowerInteraction::Service::VoteRequest(::grpc::ServerContext* context, const ::raft::VoteInfo* request, ::raft::returnVote* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace raft

